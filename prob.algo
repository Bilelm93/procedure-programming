
PROCEDURE dot_product(v1 , v2 : ARRAY_OF INTEGER[2])
VAR
    i :INTEGER;
BEGIN
 ps :=0;

FOR i FROM 0 TO v1.length-1 STEP 1  DO
    ps = v1[i] * v2[i] ;
END_FOR
END

// u→(a, b) et v→(c, d), alors u→⋅v→=ac+bd.



ALGORITHM orthogonal_vectors
VAR
    i , j : INTEGER;
BEGIN
    read(v1);
    read(v2);


FOR i FROM 0 TO v1.length-1 STEP 1  DO
  FOR j FROM 0 TO v2.length-1 STEP 1  DO
  IF ( dot_product(v1[i], v2[j]) = 0) THEN
        WRITE(two vectors are orthogonal);
 ELSE
     WRITE(two vectors are not orthogonal);
 END_IF

 END_FOR
 END_FOR
END

 /*IF (result = 0) THEN
     WRITE(two vectors are orthogonal);
 ELSE
     WRITE(two vectors are not orthogonal);
 END_IF
*/

END

///////////////////////////////////////////////////// with function 
 FUNCTION dot_product(v1 , v2 : ARRAY_OF INTEGER[2]) : INTEGER
 VAR
         i :INTEGER;
 BEGIN
   ps :=0;
    FOR i FROM 0 TO v1.length-1 STEP 1  DO
    ps = v1[i] * v2[i] ;
END_FOR
     RETURN ps ;
 END


 ALGORITHM orthogonal_vectors
VAR
    i , j : INTEGER;
BEGIN
    read(v1);
    read(v2);



  IF ( ps:=dot_product(v1,v2) = 0 ) THEN

      WRITE(two vectors are orthogonal);
   ELSE
      WRITE(two vectors are not orthogonal);
 END_IF


END
